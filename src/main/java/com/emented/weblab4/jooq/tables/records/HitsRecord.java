/*
 * This file is generated by jOOQ.
 */
package com.emented.weblab4.jooq.tables.records;


import com.emented.weblab4.jooq.tables.Hits;

import java.time.OffsetDateTime;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record8;
import org.jooq.Row8;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class HitsRecord extends UpdatableRecordImpl<HitsRecord> implements Record8<Integer, Integer, Double, Double, Double, OffsetDateTime, Long, Boolean> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>s336189.hits.id</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>s336189.hits.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>s336189.hits.user_id</code>.
     */
    public void setUserId(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>s336189.hits.user_id</code>.
     */
    public Integer getUserId() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>s336189.hits.x</code>.
     */
    public void setX(Double value) {
        set(2, value);
    }

    /**
     * Getter for <code>s336189.hits.x</code>.
     */
    public Double getX() {
        return (Double) get(2);
    }

    /**
     * Setter for <code>s336189.hits.y</code>.
     */
    public void setY(Double value) {
        set(3, value);
    }

    /**
     * Getter for <code>s336189.hits.y</code>.
     */
    public Double getY() {
        return (Double) get(3);
    }

    /**
     * Setter for <code>s336189.hits.r</code>.
     */
    public void setR(Double value) {
        set(4, value);
    }

    /**
     * Getter for <code>s336189.hits.r</code>.
     */
    public Double getR() {
        return (Double) get(4);
    }

    /**
     * Setter for <code>s336189.hits.check_date</code>.
     */
    public void setCheckDate(OffsetDateTime value) {
        set(5, value);
    }

    /**
     * Getter for <code>s336189.hits.check_date</code>.
     */
    public OffsetDateTime getCheckDate() {
        return (OffsetDateTime) get(5);
    }

    /**
     * Setter for <code>s336189.hits.execution_time</code>.
     */
    public void setExecutionTime(Long value) {
        set(6, value);
    }

    /**
     * Getter for <code>s336189.hits.execution_time</code>.
     */
    public Long getExecutionTime() {
        return (Long) get(6);
    }

    /**
     * Setter for <code>s336189.hits.status</code>.
     */
    public void setStatus(Boolean value) {
        set(7, value);
    }

    /**
     * Getter for <code>s336189.hits.status</code>.
     */
    public Boolean getStatus() {
        return (Boolean) get(7);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record8 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row8<Integer, Integer, Double, Double, Double, OffsetDateTime, Long, Boolean> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    @Override
    public Row8<Integer, Integer, Double, Double, Double, OffsetDateTime, Long, Boolean> valuesRow() {
        return (Row8) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Hits.HITS.ID;
    }

    @Override
    public Field<Integer> field2() {
        return Hits.HITS.USER_ID;
    }

    @Override
    public Field<Double> field3() {
        return Hits.HITS.X;
    }

    @Override
    public Field<Double> field4() {
        return Hits.HITS.Y;
    }

    @Override
    public Field<Double> field5() {
        return Hits.HITS.R;
    }

    @Override
    public Field<OffsetDateTime> field6() {
        return Hits.HITS.CHECK_DATE;
    }

    @Override
    public Field<Long> field7() {
        return Hits.HITS.EXECUTION_TIME;
    }

    @Override
    public Field<Boolean> field8() {
        return Hits.HITS.STATUS;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public Integer component2() {
        return getUserId();
    }

    @Override
    public Double component3() {
        return getX();
    }

    @Override
    public Double component4() {
        return getY();
    }

    @Override
    public Double component5() {
        return getR();
    }

    @Override
    public OffsetDateTime component6() {
        return getCheckDate();
    }

    @Override
    public Long component7() {
        return getExecutionTime();
    }

    @Override
    public Boolean component8() {
        return getStatus();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public Integer value2() {
        return getUserId();
    }

    @Override
    public Double value3() {
        return getX();
    }

    @Override
    public Double value4() {
        return getY();
    }

    @Override
    public Double value5() {
        return getR();
    }

    @Override
    public OffsetDateTime value6() {
        return getCheckDate();
    }

    @Override
    public Long value7() {
        return getExecutionTime();
    }

    @Override
    public Boolean value8() {
        return getStatus();
    }

    @Override
    public HitsRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public HitsRecord value2(Integer value) {
        setUserId(value);
        return this;
    }

    @Override
    public HitsRecord value3(Double value) {
        setX(value);
        return this;
    }

    @Override
    public HitsRecord value4(Double value) {
        setY(value);
        return this;
    }

    @Override
    public HitsRecord value5(Double value) {
        setR(value);
        return this;
    }

    @Override
    public HitsRecord value6(OffsetDateTime value) {
        setCheckDate(value);
        return this;
    }

    @Override
    public HitsRecord value7(Long value) {
        setExecutionTime(value);
        return this;
    }

    @Override
    public HitsRecord value8(Boolean value) {
        setStatus(value);
        return this;
    }

    @Override
    public HitsRecord values(Integer value1, Integer value2, Double value3, Double value4, Double value5, OffsetDateTime value6, Long value7, Boolean value8) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached HitsRecord
     */
    public HitsRecord() {
        super(Hits.HITS);
    }

    /**
     * Create a detached, initialised HitsRecord
     */
    public HitsRecord(Integer id, Integer userId, Double x, Double y, Double r, OffsetDateTime checkDate, Long executionTime, Boolean status) {
        super(Hits.HITS);

        setId(id);
        setUserId(userId);
        setX(x);
        setY(y);
        setR(r);
        setCheckDate(checkDate);
        setExecutionTime(executionTime);
        setStatus(status);
    }
}
